// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_reply.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_generic_5freply_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_generic_5freply_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_generic_5freply_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_generic_5freply_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_generic_5freply_2eproto;
namespace tcp_kit {
class GenericReply;
struct GenericReplyDefaultTypeInternal;
extern GenericReplyDefaultTypeInternal _GenericReply_default_instance_;
class GenericReply_BasicType;
struct GenericReply_BasicTypeDefaultTypeInternal;
extern GenericReply_BasicTypeDefaultTypeInternal _GenericReply_BasicType_default_instance_;
}  // namespace tcp_kit
PROTOBUF_NAMESPACE_OPEN
template<> ::tcp_kit::GenericReply* Arena::CreateMaybeMessage<::tcp_kit::GenericReply>(Arena*);
template<> ::tcp_kit::GenericReply_BasicType* Arena::CreateMaybeMessage<::tcp_kit::GenericReply_BasicType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tcp_kit {

enum GenericReply_Code : int {
  GenericReply_Code_UNKNOWN_ERR = 0,
  GenericReply_Code_SUCCESS = 200,
  GenericReply_Code_RES_NOT_FOUND = 404,
  GenericReply_Code_INTERNAL_SERVER_ERR = 500,
  GenericReply_Code_GenericReply_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GenericReply_Code_GenericReply_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GenericReply_Code_IsValid(int value);
constexpr GenericReply_Code GenericReply_Code_Code_MIN = GenericReply_Code_UNKNOWN_ERR;
constexpr GenericReply_Code GenericReply_Code_Code_MAX = GenericReply_Code_INTERNAL_SERVER_ERR;
constexpr int GenericReply_Code_Code_ARRAYSIZE = GenericReply_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericReply_Code_descriptor();
template<typename T>
inline const std::string& GenericReply_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GenericReply_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GenericReply_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GenericReply_Code_descriptor(), enum_t_value);
}
inline bool GenericReply_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GenericReply_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GenericReply_Code>(
    GenericReply_Code_descriptor(), name, value);
}
// ===================================================================

class GenericReply_BasicType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_kit.GenericReply.BasicType) */ {
 public:
  inline GenericReply_BasicType() : GenericReply_BasicType(nullptr) {}
  ~GenericReply_BasicType() override;
  explicit PROTOBUF_CONSTEXPR GenericReply_BasicType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericReply_BasicType(const GenericReply_BasicType& from);
  GenericReply_BasicType(GenericReply_BasicType&& from) noexcept
    : GenericReply_BasicType() {
    *this = ::std::move(from);
  }

  inline GenericReply_BasicType& operator=(const GenericReply_BasicType& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericReply_BasicType& operator=(GenericReply_BasicType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericReply_BasicType& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kU32 = 1,
    kS32 = 2,
    kU64 = 3,
    kS64 = 4,
    kF = 5,
    kD = 6,
    kB = 7,
    kStr = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const GenericReply_BasicType* internal_default_instance() {
    return reinterpret_cast<const GenericReply_BasicType*>(
               &_GenericReply_BasicType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericReply_BasicType& a, GenericReply_BasicType& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericReply_BasicType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericReply_BasicType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericReply_BasicType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericReply_BasicType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericReply_BasicType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericReply_BasicType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericReply_BasicType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_kit.GenericReply.BasicType";
  }
  protected:
  explicit GenericReply_BasicType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU32FieldNumber = 1,
    kS32FieldNumber = 2,
    kU64FieldNumber = 3,
    kS64FieldNumber = 4,
    kFFieldNumber = 5,
    kDFieldNumber = 6,
    kBFieldNumber = 7,
    kStrFieldNumber = 8,
  };
  // uint32 u32 = 1;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // int32 s32 = 2;
  bool has_s32() const;
  private:
  bool _internal_has_s32() const;
  public:
  void clear_s32();
  int32_t s32() const;
  void set_s32(int32_t value);
  private:
  int32_t _internal_s32() const;
  void _internal_set_s32(int32_t value);
  public:

  // uint64 u64 = 3;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // int64 s64 = 4;
  bool has_s64() const;
  private:
  bool _internal_has_s64() const;
  public:
  void clear_s64();
  int64_t s64() const;
  void set_s64(int64_t value);
  private:
  int64_t _internal_s64() const;
  void _internal_set_s64(int64_t value);
  public:

  // float f = 5;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // double d = 6;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // bool b = 7;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // string str = 8;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:tcp_kit.GenericReply.BasicType)
 private:
  class _Internal;
  void set_has_u32();
  void set_has_s32();
  void set_has_u64();
  void set_has_s64();
  void set_has_f();
  void set_has_d();
  void set_has_b();
  void set_has_str();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint32_t u32_;
    int32_t s32_;
    uint64_t u64_;
    int64_t s64_;
    float f_;
    double d_;
    bool b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_generic_5freply_2eproto;
};
// -------------------------------------------------------------------

class GenericReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_kit.GenericReply) */ {
 public:
  inline GenericReply() : GenericReply(nullptr) {}
  ~GenericReply() override;
  explicit PROTOBUF_CONSTEXPR GenericReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericReply(const GenericReply& from);
  GenericReply(GenericReply&& from) noexcept
    : GenericReply() {
    *this = ::std::move(from);
  }

  inline GenericReply& operator=(const GenericReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericReply& operator=(GenericReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericReply* internal_default_instance() {
    return reinterpret_cast<const GenericReply*>(
               &_GenericReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericReply& a, GenericReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenericReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_kit.GenericReply";
  }
  protected:
  explicit GenericReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenericReply_BasicType BasicType;

  typedef GenericReply_Code Code;
  static constexpr Code UNKNOWN_ERR =
    GenericReply_Code_UNKNOWN_ERR;
  static constexpr Code SUCCESS =
    GenericReply_Code_SUCCESS;
  static constexpr Code RES_NOT_FOUND =
    GenericReply_Code_RES_NOT_FOUND;
  static constexpr Code INTERNAL_SERVER_ERR =
    GenericReply_Code_INTERNAL_SERVER_ERR;
  static inline bool Code_IsValid(int value) {
    return GenericReply_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    GenericReply_Code_Code_MIN;
  static constexpr Code Code_MAX =
    GenericReply_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    GenericReply_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return GenericReply_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return GenericReply_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return GenericReply_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kResultFieldNumber = 3,
    kBodyFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // optional string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional .tcp_kit.GenericReply.BasicType result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::tcp_kit::GenericReply_BasicType& result() const;
  PROTOBUF_NODISCARD ::tcp_kit::GenericReply_BasicType* release_result();
  ::tcp_kit::GenericReply_BasicType* mutable_result();
  void set_allocated_result(::tcp_kit::GenericReply_BasicType* result);
  private:
  const ::tcp_kit::GenericReply_BasicType& _internal_result() const;
  ::tcp_kit::GenericReply_BasicType* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::tcp_kit::GenericReply_BasicType* result);
  ::tcp_kit::GenericReply_BasicType* unsafe_arena_release_result();

  // optional .google.protobuf.Any body = 4;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::PROTOBUF_NAMESPACE_ID::Any& body() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_body();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_body();
  void set_allocated_body(::PROTOBUF_NAMESPACE_ID::Any* body);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_body() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::PROTOBUF_NAMESPACE_ID::Any* body);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_body();

  // .tcp_kit.GenericReply.Code code = 1;
  void clear_code();
  ::tcp_kit::GenericReply_Code code() const;
  void set_code(::tcp_kit::GenericReply_Code value);
  private:
  ::tcp_kit::GenericReply_Code _internal_code() const;
  void _internal_set_code(::tcp_kit::GenericReply_Code value);
  public:

  // @@protoc_insertion_point(class_scope:tcp_kit.GenericReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::tcp_kit::GenericReply_BasicType* result_;
  ::PROTOBUF_NAMESPACE_ID::Any* body_;
  int code_;
  friend struct ::TableStruct_generic_5freply_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenericReply_BasicType

// uint32 u32 = 1;
inline bool GenericReply_BasicType::_internal_has_u32() const {
  return value_case() == kU32;
}
inline bool GenericReply_BasicType::has_u32() const {
  return _internal_has_u32();
}
inline void GenericReply_BasicType::set_has_u32() {
  _oneof_case_[0] = kU32;
}
inline void GenericReply_BasicType::clear_u32() {
  if (_internal_has_u32()) {
    value_.u32_ = 0u;
    clear_has_value();
  }
}
inline uint32_t GenericReply_BasicType::_internal_u32() const {
  if (_internal_has_u32()) {
    return value_.u32_;
  }
  return 0u;
}
inline void GenericReply_BasicType::_internal_set_u32(uint32_t value) {
  if (!_internal_has_u32()) {
    clear_value();
    set_has_u32();
  }
  value_.u32_ = value;
}
inline uint32_t GenericReply_BasicType::u32() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.u32)
  return _internal_u32();
}
inline void GenericReply_BasicType::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.u32)
}

// int32 s32 = 2;
inline bool GenericReply_BasicType::_internal_has_s32() const {
  return value_case() == kS32;
}
inline bool GenericReply_BasicType::has_s32() const {
  return _internal_has_s32();
}
inline void GenericReply_BasicType::set_has_s32() {
  _oneof_case_[0] = kS32;
}
inline void GenericReply_BasicType::clear_s32() {
  if (_internal_has_s32()) {
    value_.s32_ = 0;
    clear_has_value();
  }
}
inline int32_t GenericReply_BasicType::_internal_s32() const {
  if (_internal_has_s32()) {
    return value_.s32_;
  }
  return 0;
}
inline void GenericReply_BasicType::_internal_set_s32(int32_t value) {
  if (!_internal_has_s32()) {
    clear_value();
    set_has_s32();
  }
  value_.s32_ = value;
}
inline int32_t GenericReply_BasicType::s32() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.s32)
  return _internal_s32();
}
inline void GenericReply_BasicType::set_s32(int32_t value) {
  _internal_set_s32(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.s32)
}

// uint64 u64 = 3;
inline bool GenericReply_BasicType::_internal_has_u64() const {
  return value_case() == kU64;
}
inline bool GenericReply_BasicType::has_u64() const {
  return _internal_has_u64();
}
inline void GenericReply_BasicType::set_has_u64() {
  _oneof_case_[0] = kU64;
}
inline void GenericReply_BasicType::clear_u64() {
  if (_internal_has_u64()) {
    value_.u64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t GenericReply_BasicType::_internal_u64() const {
  if (_internal_has_u64()) {
    return value_.u64_;
  }
  return uint64_t{0u};
}
inline void GenericReply_BasicType::_internal_set_u64(uint64_t value) {
  if (!_internal_has_u64()) {
    clear_value();
    set_has_u64();
  }
  value_.u64_ = value;
}
inline uint64_t GenericReply_BasicType::u64() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.u64)
  return _internal_u64();
}
inline void GenericReply_BasicType::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.u64)
}

// int64 s64 = 4;
inline bool GenericReply_BasicType::_internal_has_s64() const {
  return value_case() == kS64;
}
inline bool GenericReply_BasicType::has_s64() const {
  return _internal_has_s64();
}
inline void GenericReply_BasicType::set_has_s64() {
  _oneof_case_[0] = kS64;
}
inline void GenericReply_BasicType::clear_s64() {
  if (_internal_has_s64()) {
    value_.s64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t GenericReply_BasicType::_internal_s64() const {
  if (_internal_has_s64()) {
    return value_.s64_;
  }
  return int64_t{0};
}
inline void GenericReply_BasicType::_internal_set_s64(int64_t value) {
  if (!_internal_has_s64()) {
    clear_value();
    set_has_s64();
  }
  value_.s64_ = value;
}
inline int64_t GenericReply_BasicType::s64() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.s64)
  return _internal_s64();
}
inline void GenericReply_BasicType::set_s64(int64_t value) {
  _internal_set_s64(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.s64)
}

// float f = 5;
inline bool GenericReply_BasicType::_internal_has_f() const {
  return value_case() == kF;
}
inline bool GenericReply_BasicType::has_f() const {
  return _internal_has_f();
}
inline void GenericReply_BasicType::set_has_f() {
  _oneof_case_[0] = kF;
}
inline void GenericReply_BasicType::clear_f() {
  if (_internal_has_f()) {
    value_.f_ = 0;
    clear_has_value();
  }
}
inline float GenericReply_BasicType::_internal_f() const {
  if (_internal_has_f()) {
    return value_.f_;
  }
  return 0;
}
inline void GenericReply_BasicType::_internal_set_f(float value) {
  if (!_internal_has_f()) {
    clear_value();
    set_has_f();
  }
  value_.f_ = value;
}
inline float GenericReply_BasicType::f() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.f)
  return _internal_f();
}
inline void GenericReply_BasicType::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.f)
}

// double d = 6;
inline bool GenericReply_BasicType::_internal_has_d() const {
  return value_case() == kD;
}
inline bool GenericReply_BasicType::has_d() const {
  return _internal_has_d();
}
inline void GenericReply_BasicType::set_has_d() {
  _oneof_case_[0] = kD;
}
inline void GenericReply_BasicType::clear_d() {
  if (_internal_has_d()) {
    value_.d_ = 0;
    clear_has_value();
  }
}
inline double GenericReply_BasicType::_internal_d() const {
  if (_internal_has_d()) {
    return value_.d_;
  }
  return 0;
}
inline void GenericReply_BasicType::_internal_set_d(double value) {
  if (!_internal_has_d()) {
    clear_value();
    set_has_d();
  }
  value_.d_ = value;
}
inline double GenericReply_BasicType::d() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.d)
  return _internal_d();
}
inline void GenericReply_BasicType::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.d)
}

// bool b = 7;
inline bool GenericReply_BasicType::_internal_has_b() const {
  return value_case() == kB;
}
inline bool GenericReply_BasicType::has_b() const {
  return _internal_has_b();
}
inline void GenericReply_BasicType::set_has_b() {
  _oneof_case_[0] = kB;
}
inline void GenericReply_BasicType::clear_b() {
  if (_internal_has_b()) {
    value_.b_ = false;
    clear_has_value();
  }
}
inline bool GenericReply_BasicType::_internal_b() const {
  if (_internal_has_b()) {
    return value_.b_;
  }
  return false;
}
inline void GenericReply_BasicType::_internal_set_b(bool value) {
  if (!_internal_has_b()) {
    clear_value();
    set_has_b();
  }
  value_.b_ = value;
}
inline bool GenericReply_BasicType::b() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.b)
  return _internal_b();
}
inline void GenericReply_BasicType::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.b)
}

// string str = 8;
inline bool GenericReply_BasicType::_internal_has_str() const {
  return value_case() == kStr;
}
inline bool GenericReply_BasicType::has_str() const {
  return _internal_has_str();
}
inline void GenericReply_BasicType::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void GenericReply_BasicType::clear_str() {
  if (_internal_has_str()) {
    value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& GenericReply_BasicType::str() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.BasicType.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void GenericReply_BasicType::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  value_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.BasicType.str)
}
inline std::string* GenericReply_BasicType::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:tcp_kit.GenericReply.BasicType.str)
  return _s;
}
inline const std::string& GenericReply_BasicType::_internal_str() const {
  if (_internal_has_str()) {
    return value_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GenericReply_BasicType::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericReply_BasicType::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    value_.str_.InitDefault();
  }
  return value_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* GenericReply_BasicType::release_str() {
  // @@protoc_insertion_point(field_release:tcp_kit.GenericReply.BasicType.str)
  if (_internal_has_str()) {
    clear_has_value();
    return value_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void GenericReply_BasicType::set_allocated_str(std::string* str) {
  if (has_value()) {
    clear_value();
  }
  if (str != nullptr) {
    set_has_str();
    value_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tcp_kit.GenericReply.BasicType.str)
}

inline bool GenericReply_BasicType::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void GenericReply_BasicType::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline GenericReply_BasicType::ValueCase GenericReply_BasicType::value_case() const {
  return GenericReply_BasicType::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenericReply

// .tcp_kit.GenericReply.Code code = 1;
inline void GenericReply::clear_code() {
  code_ = 0;
}
inline ::tcp_kit::GenericReply_Code GenericReply::_internal_code() const {
  return static_cast< ::tcp_kit::GenericReply_Code >(code_);
}
inline ::tcp_kit::GenericReply_Code GenericReply::code() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.code)
  return _internal_code();
}
inline void GenericReply::_internal_set_code(::tcp_kit::GenericReply_Code value) {
  
  code_ = value;
}
inline void GenericReply::set_code(::tcp_kit::GenericReply_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.code)
}

// optional string msg = 2;
inline bool GenericReply::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenericReply::has_msg() const {
  return _internal_has_msg();
}
inline void GenericReply::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenericReply::msg() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenericReply::set_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tcp_kit.GenericReply.msg)
}
inline std::string* GenericReply::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:tcp_kit.GenericReply.msg)
  return _s;
}
inline const std::string& GenericReply::_internal_msg() const {
  return msg_.Get();
}
inline void GenericReply::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericReply::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GenericReply::release_msg() {
  // @@protoc_insertion_point(field_release:tcp_kit.GenericReply.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GenericReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tcp_kit.GenericReply.msg)
}

// optional .tcp_kit.GenericReply.BasicType result = 3;
inline bool GenericReply::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || result_ != nullptr);
  return value;
}
inline bool GenericReply::has_result() const {
  return _internal_has_result();
}
inline void GenericReply::clear_result() {
  if (result_ != nullptr) result_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tcp_kit::GenericReply_BasicType& GenericReply::_internal_result() const {
  const ::tcp_kit::GenericReply_BasicType* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::tcp_kit::GenericReply_BasicType&>(
      ::tcp_kit::_GenericReply_BasicType_default_instance_);
}
inline const ::tcp_kit::GenericReply_BasicType& GenericReply::result() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.result)
  return _internal_result();
}
inline void GenericReply::unsafe_arena_set_allocated_result(
    ::tcp_kit::GenericReply_BasicType* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_kit.GenericReply.result)
}
inline ::tcp_kit::GenericReply_BasicType* GenericReply::release_result() {
  _has_bits_[0] &= ~0x00000002u;
  ::tcp_kit::GenericReply_BasicType* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tcp_kit::GenericReply_BasicType* GenericReply::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:tcp_kit.GenericReply.result)
  _has_bits_[0] &= ~0x00000002u;
  ::tcp_kit::GenericReply_BasicType* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::tcp_kit::GenericReply_BasicType* GenericReply::_internal_mutable_result() {
  _has_bits_[0] |= 0x00000002u;
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::tcp_kit::GenericReply_BasicType>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::tcp_kit::GenericReply_BasicType* GenericReply::mutable_result() {
  ::tcp_kit::GenericReply_BasicType* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:tcp_kit.GenericReply.result)
  return _msg;
}
inline void GenericReply::set_allocated_result(::tcp_kit::GenericReply_BasicType* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:tcp_kit.GenericReply.result)
}

// optional .google.protobuf.Any body = 4;
inline bool GenericReply::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || body_ != nullptr);
  return value;
}
inline bool GenericReply::has_body() const {
  return _internal_has_body();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GenericReply::_internal_body() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GenericReply::body() const {
  // @@protoc_insertion_point(field_get:tcp_kit.GenericReply.body)
  return _internal_body();
}
inline void GenericReply::unsafe_arena_set_allocated_body(
    ::PROTOBUF_NAMESPACE_ID::Any* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_kit.GenericReply.body)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GenericReply::release_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GenericReply::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:tcp_kit.GenericReply.body)
  _has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GenericReply::_internal_mutable_body() {
  _has_bits_[0] |= 0x00000004u;
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GenericReply::mutable_body() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:tcp_kit.GenericReply.body)
  return _msg;
}
inline void GenericReply::set_allocated_body(::PROTOBUF_NAMESPACE_ID::Any* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:tcp_kit.GenericReply.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tcp_kit

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tcp_kit::GenericReply_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_kit::GenericReply_Code>() {
  return ::tcp_kit::GenericReply_Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_generic_5freply_2eproto
